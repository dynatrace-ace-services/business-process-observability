{"version":"5","defaultTimeframe":{"from":"now-90d","to":"now","details":{"from":{"type":"expression","normalized":"now-90d","date":"2023-10-05T12:07:14.069Z"},"to":{"type":"expression","normalized":"now","date":"2024-01-03T13:07:14.069Z"}}},"sections":[{"id":"e56ae578-2e12-440e-8692-bd1b7229ee5d","type":"markdown","markdown":"# Unlock the Business Process Observability with GRAIL\n- this notebook contains DQL examples\n\n---\n---\nThis is a sample for educational purposes only and not officially part of the product.\nIf you have question, leave a comment on the github repo.\n\nFor more information about Dynatrace please visit [dynatrace.com](https://www.dynatrace.com)\n\n---\n---"},{"id":"15a33c1d-dfef-40b4-967a-8b2ce149c2fb","type":"markdown","markdown":"## 1 - Business Process Observability\nFor all your business processes, you can use\n- [Business Flow apps](https://www.dynatrace.com/hub/detail/business-flow/)\n- DQL (see example below : DQL request 1)"},{"id":"cbe4bc81-fd4f-464c-8302-8195918ab9a2","type":"markdown","markdown":"![business_process](https://github.com/dynatrace-ace-services/business-process-observability/blob/main/assets/business_events.png?raw=true)"},{"id":"840794cc-9813-4f3c-b067-57d4990ed080","type":"markdown","markdown":"## Example of Business Process Observability with Business Flow\n- eCommerce performance Observability from the order to the delivery\n- for more detail click [here](https://www.dynatrace.com/hub/detail/business-flow/)\n\n![businessflow](https://github.com/dynatrace-ace-services/business-process-observability/blob/main/assets/business_flow_funnel.png?raw=true)"},{"id":"1fba8d5e-535e-409a-ab4e-81dbf0eee0ae","type":"markdown","markdown":"## Example of Business Process Observability with DQL\n- **DQL request 1** = observability of a full production line"},{"id":"6c6eaa3d-554f-4281-aaf1-a3bbe8ca30ee","type":"dql","showTitle":false,"state":{"input":{"value":"//DQL based on BizEvents or Logs with the same ID = order_ID\n\n// data \n// is here to simulated BizEvents or Logs\n// in normal context, used  \n\n//fetch bizevents\n//| filter contains(event.name, \"step\")\n\n// fetch logs\n//| filter contains(log.source, \"step\")\n\ndata \n    record(timestamp=now()-45m, log.source=\"step1\", content=\"order_ID=1095684, start_time=20231019160000986, status_step1=OK\"),\n    record(timestamp=now()-30m, log.source=\"step1\", content=\"order_ID=1095685, start_time=20231019161501986, status_step1=OK\"),\n    record(timestamp=now()-15m, log.source=\"step1\", content=\"order_ID=1095686, start_time=20231019163101986, status_step1=OK\"),\n    \n    record(timestamp=now()-45m, log.source=\"step2\", content=\"order_ID=1095684, status_step2=OK\"),\n    record(timestamp=now()-30m, log.source=\"step2\", content=\"order_ID=1095685, status_step2=OK\"),\n    record(timestamp=now()-15m, log.source=\"step2\", content=\"order_ID=1095686, status_step2=OK\"),\n            \n    record(timestamp=now()-45m, log.source=\"step3\", content=\"order_ID=1095684, status_step3=OK\"),\n    record(timestamp=now()-30m, log.source=\"step3\", content=\"order_ID=1095685, status_step3=OK\"),\n    record(timestamp=now()-15m, log.source=\"step3\", content=\"order_ID=1095686, status_step3=warning\"),\n    \n    record(timestamp=now()-45m, log.source=\"step4\", content=\"order_ID=1095684, status_step4=OK\"),\n    record(timestamp=now()-30m, log.source=\"step4\", content=\"order_ID=1095685, status_step4=OK\"),\n    record(timestamp=now()-15m, log.source=\"step4\", content=\"order_ID=1095686, status_step4=failed\"),\n\n    record(timestamp=now()-45m, log.source=\"step5\", content=\"order_ID=1095684, end_time=2023/10/20 16:01:30, status_step5=OK, \"),\n    record(timestamp=now()-30m, log.source=\"step5\", content=\"order_ID=1095685, end_time=2023/10/21 16:31:30, status_step5=OK\")\n                    \n| parse content, \"\"\"'order_ID=' WORD:order_ID \n      ((', start_time='TIMESTAMP('yyyyMMddHHmmssSSS'):start_time ', status_step1=' WORD:status_step1 ) |\n      (', status_step2=' WORD:status_step2) |\n      (', status_step3=' WORD:status_step3) |\n      (', status_step4=' WORD:status_step4) |\n      (', end_time='TIMESTAMP('yyyy/MM/d HH:mm:ss'):end_time ', status_step5=' WORD:status_step5))\"\"\"\n      \n| summarize{  startTime = takeFirst(start_time), endTime = takeFirst(end_time),\n      status_step1 = takeFirst(status_step1),\n      status_step2 = takeFirst(status_step2),\n      status_step3 = takeFirst(status_step3),\n      status_step4 = takeFirst(status_step4),\n      status_step5 = takeFirst(status_step5)\n      },  by: {order_ID}\n","timeframe":{"from":"now-2h","to":"now"}},"visualization":"table","state":"success","davis":{"includeLogs":true,"davisVisualization":{"isAvailable":true}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}}},"result":{"code":200,"value":{"records":[{"order_ID":"1095684","startTime":"2023-10-19T16:00:00.986000000+02:00","endTime":"2023-10-20T16:01:30.000000000+02:00","status_step1":"OK","status_step2":"OK","status_step3":"OK","status_step4":"OK","status_step5":"OK"},{"order_ID":"1095685","startTime":"2023-10-19T16:15:01.986000000+02:00","endTime":"2023-10-21T16:31:30.000000000+02:00","status_step1":"OK","status_step2":"OK","status_step3":"OK","status_step4":"OK","status_step5":"OK"},{"order_ID":"1095686","startTime":"2023-10-19T16:31:01.986000000+02:00","endTime":null,"status_step1":"OK","status_step2":"OK","status_step3":"warning","status_step4":"failed","status_step5":null}],"metadata":{"grail":{"canonicalQuery":"data record(timestamp = now() - 45m, log.source = \"step1\", content = \"order_ID=1095684, start_time=20231019160000986, status_step1=OK\"), record(timestamp = now() - 30m, log.source = \"step1\", content = \"order_ID=1095685, start_time=20231019161501986, status_step1=OK\"), record(timestamp = now() - 15m, log.source = \"step1\", content = \"order_ID=1095686, start_time=20231019163101986, status_step1=OK\"), record(timestamp = now() - 45m, log.source = \"step2\", content = \"order_ID=1095684, status_step2=OK\"), record(timestamp = now() - 30m, log.source = \"step2\", content = \"order_ID=1095685, status_step2=OK\"), record(timestamp = now() - 15m, log.source = \"step2\", content = \"order_ID=1095686, status_step2=OK\"), record(timestamp = now() - 45m, log.source = \"step3\", content = \"order_ID=1095684, status_step3=OK\"), record(timestamp = now() - 30m, log.source = \"step3\", content = \"order_ID=1095685, status_step3=OK\"), record(timestamp = now() - 15m, log.source = \"step3\", content = \"order_ID=1095686, status_step3=warning\"), record(timestamp = now() - 45m, log.source = \"step4\", content = \"order_ID=1095684, status_step4=OK\"), record(timestamp = now() - 30m, log.source = \"step4\", content = \"order_ID=1095685, status_step4=OK\"), record(timestamp = now() - 15m, log.source = \"step4\", content = \"order_ID=1095686, status_step4=failed\"), record(timestamp = now() - 45m, log.source = \"step5\", content = \"order_ID=1095684, end_time=2023/10/20 16:01:30, status_step5=OK, \"), record(timestamp = now() - 30m, log.source = \"step5\", content = \"order_ID=1095685, end_time=2023/10/21 16:31:30, status_step5=OK\")\n| parse content, \"\"\"'order_ID=' WORD:order_ID \n      ((', start_time='TIMESTAMP('yyyyMMddHHmmssSSS'):start_time ', status_step1=' WORD:status_step1 ) |\n      (', status_step2=' WORD:status_step2) |\n      (', status_step3=' WORD:status_step3) |\n      (', status_step4=' WORD:status_step4) |\n      (', end_time='TIMESTAMP('yyyy/MM/d HH:mm:ss'):end_time ', status_step5=' WORD:status_step5))\"\"\"\n| summarize by:{order_ID}, {{takeFirst(start_time), alias:startTime}, {takeFirst(end_time), alias:endTime}, {takeFirst(status_step1), alias:status_step1}, {takeFirst(status_step2), alias:status_step2}, {takeFirst(status_step3), alias:status_step3}, {takeFirst(status_step4), alias:status_step4}, {takeFirst(status_step5), alias:status_step5}}","timezone":"Europe/Paris","query":"//DQL based on different BizEvents or Logs with the same ID\n\n// data \n// is here to simulated BizEvents or Logs\n// in normal context, used  \n\n//fetch bizevents\n//| filter contains(event.name, \"step\")\n\n// fetch logs\n//| filter contains(log.source, \"step\")\n\ndata \n    record(timestamp=now()-45m, log.source=\"step1\", content=\"order_ID=1095684, start_time=20231019160000986, status_step1=OK\"),\n    record(timestamp=now()-30m, log.source=\"step1\", content=\"order_ID=1095685, start_time=20231019161501986, status_step1=OK\"),\n    record(timestamp=now()-15m, log.source=\"step1\", content=\"order_ID=1095686, start_time=20231019163101986, status_step1=OK\"),\n    \n    record(timestamp=now()-45m, log.source=\"step2\", content=\"order_ID=1095684, status_step2=OK\"),\n    record(timestamp=now()-30m, log.source=\"step2\", content=\"order_ID=1095685, status_step2=OK\"),\n    record(timestamp=now()-15m, log.source=\"step2\", content=\"order_ID=1095686, status_step2=OK\"),\n            \n    record(timestamp=now()-45m, log.source=\"step3\", content=\"order_ID=1095684, status_step3=OK\"),\n    record(timestamp=now()-30m, log.source=\"step3\", content=\"order_ID=1095685, status_step3=OK\"),\n    record(timestamp=now()-15m, log.source=\"step3\", content=\"order_ID=1095686, status_step3=warning\"),\n    \n    record(timestamp=now()-45m, log.source=\"step4\", content=\"order_ID=1095684, status_step4=OK\"),\n    record(timestamp=now()-30m, log.source=\"step4\", content=\"order_ID=1095685, status_step4=OK\"),\n    record(timestamp=now()-15m, log.source=\"step4\", content=\"order_ID=1095686, status_step4=failed\"),\n\n    record(timestamp=now()-45m, log.source=\"step5\", content=\"order_ID=1095684, end_time=2023/10/20 16:01:30, status_step5=OK, \"),\n    record(timestamp=now()-30m, log.source=\"step5\", content=\"order_ID=1095685, end_time=2023/10/21 16:31:30, status_step5=OK\")\n                    \n| parse content, \"\"\"'order_ID=' WORD:order_ID \n      ((', start_time='TIMESTAMP('yyyyMMddHHmmssSSS'):start_time ', status_step1=' WORD:status_step1 ) |\n      (', status_step2=' WORD:status_step2) |\n      (', status_step3=' WORD:status_step3) |\n      (', status_step4=' WORD:status_step4) |\n      (', end_time='TIMESTAMP('yyyy/MM/d HH:mm:ss'):end_time ', status_step5=' WORD:status_step5))\"\"\"\n      \n| summarize{  startTime = takeFirst(start_time), endTime = takeFirst(end_time),\n      status_step1 = takeFirst(status_step1),\n      status_step2 = takeFirst(status_step2),\n      status_step3 = takeFirst(status_step3),\n      status_step4 = takeFirst(status_step4),\n      status_step5 = takeFirst(status_step5)\n      },  by: {order_ID}\n","scannedRecords":0,"dqlVersion":"V1_0","scannedBytes":0,"locale":"","executionTimeMilliseconds":24,"notifications":[],"queryId":"01fe4fc2-2668-4cb0-98ec-9647169f73bb","sampled":false}},"types":[{"mappings":{"order_ID":{"type":"string"},"startTime":{"type":"timestamp"},"endTime":{"type":"timestamp"},"status_step1":{"type":"string"},"status_step2":{"type":"string"},"status_step3":{"type":"string"},"status_step4":{"type":"string"},"status_step5":{"type":"string"}},"indexRange":[0,2]}]},"notifications":[],"dateTime":"2024-01-03T13:09:34.594Z","input":{"value":"//DQL based on different BizEvents or Logs with the same ID\n\n// data \n// is here to simulated BizEvents or Logs\n// in normal context, used  \n\n//fetch bizevents\n//| filter contains(event.name, \"step\")\n\n// fetch logs\n//| filter contains(log.source, \"step\")\n\ndata \n    record(timestamp=now()-45m, log.source=\"step1\", content=\"order_ID=1095684, start_time=20231019160000986, status_step1=OK\"),\n    record(timestamp=now()-30m, log.source=\"step1\", content=\"order_ID=1095685, start_time=20231019161501986, status_step1=OK\"),\n    record(timestamp=now()-15m, log.source=\"step1\", content=\"order_ID=1095686, start_time=20231019163101986, status_step1=OK\"),\n    \n    record(timestamp=now()-45m, log.source=\"step2\", content=\"order_ID=1095684, status_step2=OK\"),\n    record(timestamp=now()-30m, log.source=\"step2\", content=\"order_ID=1095685, status_step2=OK\"),\n    record(timestamp=now()-15m, log.source=\"step2\", content=\"order_ID=1095686, status_step2=OK\"),\n            \n    record(timestamp=now()-45m, log.source=\"step3\", content=\"order_ID=1095684, status_step3=OK\"),\n    record(timestamp=now()-30m, log.source=\"step3\", content=\"order_ID=1095685, status_step3=OK\"),\n    record(timestamp=now()-15m, log.source=\"step3\", content=\"order_ID=1095686, status_step3=warning\"),\n    \n    record(timestamp=now()-45m, log.source=\"step4\", content=\"order_ID=1095684, status_step4=OK\"),\n    record(timestamp=now()-30m, log.source=\"step4\", content=\"order_ID=1095685, status_step4=OK\"),\n    record(timestamp=now()-15m, log.source=\"step4\", content=\"order_ID=1095686, status_step4=failed\"),\n\n    record(timestamp=now()-45m, log.source=\"step5\", content=\"order_ID=1095684, end_time=2023/10/20 16:01:30, status_step5=OK, \"),\n    record(timestamp=now()-30m, log.source=\"step5\", content=\"order_ID=1095685, end_time=2023/10/21 16:31:30, status_step5=OK\")\n                    \n| parse content, \"\"\"'order_ID=' WORD:order_ID \n      ((', start_time='TIMESTAMP('yyyyMMddHHmmssSSS'):start_time ', status_step1=' WORD:status_step1 ) |\n      (', status_step2=' WORD:status_step2) |\n      (', status_step3=' WORD:status_step3) |\n      (', status_step4=' WORD:status_step4) |\n      (', end_time='TIMESTAMP('yyyy/MM/d HH:mm:ss'):end_time ', status_step5=' WORD:status_step5))\"\"\"\n      \n| summarize{  startTime = takeFirst(start_time), endTime = takeFirst(end_time),\n      status_step1 = takeFirst(status_step1),\n      status_step2 = takeFirst(status_step2),\n      status_step3 = takeFirst(status_step3),\n      status_step4 = takeFirst(status_step4),\n      status_step5 = takeFirst(status_step5)\n      },  by: {order_ID}\n","timeframe":{"from":"now-2h","to":"now"}}}},"height":153},{"id":"016b96a4-1399-479f-b7c1-2f890342f07e","type":"markdown","markdown":"# 2 - Observability of a specific use case : Payment delay\n- DQL request 2 = Payment Delay performance\n- DQL request 3 = SLO based on Payment delay"},{"id":"27efe851-16f1-4a6e-905b-2f3857bab53b","type":"markdown","markdown":"![Payment_delay](https://github.com/dynatrace-ace-services/business-process-observability/blob/main/assets/payment_delay.png?raw=true)"},{"id":"11fe3255-16eb-4b63-857f-29c1ac0da169","type":"markdown","markdown":"## Example of Business Process Observability with DQL\n- **DQL request 2** = Payment delay performance "},{"id":"deddf87b-dbfa-4deb-9484-0710a82aaea2","type":"dql","showTitle":false,"state":{"input":{"value":"//DQL based on BizEvents or Logs with the discontinued ID :betID=runID\n\n// data \n// is here to simulated BizEvents or Logs\n// in normal context, used  \n\n//fetch bizevents\n//| filter contains(event.name, \"step\")\n\n// fetch logs\n//| filter contains(log.source, \"step\")\n\ndata \n    //datasource1 : notification (log or bizevents)\n    record(timestamp=now()-45m, log.source=\"file1\", betID=\"BET_20231019160000\", start_time=1701331220000000000, winners=65),\n    record(timestamp=now()-30m, log.source=\"file1\", betID=\"BET_20231019161501\", start_time=1701332120000000000, winners=47),\n    record(timestamp=now()-15m, log.source=\"file1\", betID=\"BET_20231019163101\", start_time=1701333000000000000, winners=118),\n    //datasource2 : correlation id (log or bizevents=\n    record(timestamp=now()-43m, log.source=\"file2\", betID=\"BET_20231019160000\", runID=\"2023101900045\"),\n    record(timestamp=now()-28m, log.source=\"file2\", betID=\"BET_20231019161501\", runID=\"2023101900055\"),\n    record(timestamp=now()-12m, log.source=\"file2\", betID=\"BET_20231019163101\", runID=\"2023101900065\"),\n    //datasource1 : online payment (log or bizevents)\n    record(timestamp=now()-41m, log.source=\"file3\", runID=\"2023101900045\", end_time=1701331400000000000),\n    record(timestamp=now()-26m, log.source=\"file3\", runID=\"2023101900055\", end_time=1701332342000000000),\n    record(timestamp=now()-10m, log.source=\"file3\", runID=\"2023101900065\", end_time=1701333894000000000)\n\n// correaltion based on betID\n| summarize {\n    records = if (\n        isNotNull(takeAny(end_time)), collectArray(record(runID,end_time)),\n        else: record(startTime = takeAny(start_time), runID=takeAny(runID),winners=takeAny(winners)))\n    }, by:{betID}\n| expand records\n\n// correaltion based on runID\n| summarize { \n    startTime = takeAny(records[startTime]),betID = takeAny(betID),winners = takeAny(records[winners]), endTime = takeAny(records[end_time])\n    }, by: {runID= records[runID]}\n\n|fields start=toTimestamp(startTime), runID, betID, winners, end=toTimestamp(endTime), payment_delay=(toTimestamp(endTime)-toTimestamp(startTime))\n","timeframe":{"from":"now-90d","to":"now","details":{"from":{"type":"expression","normalized":"now-90d","date":"2023-10-05T12:07:14.069Z"},"to":{"type":"expression","normalized":"now","date":"2024-01-03T13:07:14.069Z"}}}},"visualization":"table","state":"success","davis":{"includeLogs":true,"davisVisualization":{"isAvailable":true}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"dt.entity.host","categoryAxisLabel":"dt.entity.host","valueAxis":"electricConsumption_CPU","valueAxisLabel":"electricConsumption_CPU"},"fieldMapping":{"timestamp":"timestamp","fields":["dt.entity.host"],"values":["electricConsumption_CPU"]}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{"[\"start\"]":163.6931915283203,"[\"runID\"]":116.47727966308594,"[\"betID\"]":175.30682373046875,"[\"winners\"]":98.82955169677734,"[\"end\"]":163.6931915283203,"[\"payment_delay\"]":146.2045440673828}}},"result":{"code":200,"value":{"records":[{"start":"2023-11-30T09:00:20.000000000+01:00","runID":"2023101900045","betID":"BET_20231019160000","winners":"65","end":"2023-11-30T09:03:20.000000000+01:00","payment_delay":"180000000000"},{"start":"2023-11-30T09:15:20.000000000+01:00","runID":"2023101900055","betID":"BET_20231019161501","winners":"47","end":"2023-11-30T09:19:02.000000000+01:00","payment_delay":"222000000000"},{"start":"2023-11-30T09:30:00.000000000+01:00","runID":"2023101900065","betID":"BET_20231019163101","winners":"118","end":"2023-11-30T09:44:54.000000000+01:00","payment_delay":"894000000000"}],"metadata":{"grail":{"canonicalQuery":"data record(timestamp = now() - 45m, log.source = \"file1\", betID = \"BET_20231019160000\", start_time = 1701331220000000000, winners = 65), record(timestamp = now() - 30m, log.source = \"file1\", betID = \"BET_20231019161501\", start_time = 1701332120000000000, winners = 47), record(timestamp = now() - 15m, log.source = \"file1\", betID = \"BET_20231019163101\", start_time = 1701333000000000000, winners = 118), record(timestamp = now() - 43m, log.source = \"file2\", betID = \"BET_20231019160000\", runID = \"2023101900045\"), record(timestamp = now() - 28m, log.source = \"file2\", betID = \"BET_20231019161501\", runID = \"2023101900055\"), record(timestamp = now() - 12m, log.source = \"file2\", betID = \"BET_20231019163101\", runID = \"2023101900065\"), record(timestamp = now() - 41m, log.source = \"file3\", runID = \"2023101900045\", end_time = 1701331400000000000), record(timestamp = now() - 26m, log.source = \"file3\", runID = \"2023101900055\", end_time = 1701332342000000000), record(timestamp = now() - 10m, log.source = \"file3\", runID = \"2023101900065\", end_time = 1701333894000000000)\n| summarize by:{betID}, if(isNotNull(takeAny(end_time)), collectArray(record(runID, end_time)), else:record(startTime = takeAny(start_time), runID = takeAny(runID), winners = takeAny(winners))), alias:records\n| expand records\n| summarize by:{records[runID], alias:runID}, {{takeAny(records[startTime]), alias:startTime}, {takeAny(betID), alias:betID}, {takeAny(records[winners]), alias:winners}, {takeAny(records[end_time]), alias:endTime}}\n| fields {toTimestamp(startTime), alias:start}, runID, betID, winners, {toTimestamp(endTime), alias:end}, {toTimestamp(endTime) - toTimestamp(startTime), alias:payment_delay}","timezone":"Europe/Paris","query":"data \n    //datasource1 : notification (log or bizevents)\n    record(timestamp=now()-45m, log.source=\"file1\", betID=\"BET_20231019160000\", start_time=1701331220000000000, winners=65),\n    record(timestamp=now()-30m, log.source=\"file1\", betID=\"BET_20231019161501\", start_time=1701332120000000000, winners=47),\n    record(timestamp=now()-15m, log.source=\"file1\", betID=\"BET_20231019163101\", start_time=1701333000000000000, winners=118),\n    //datasource2 : correlation id (log or bizevents=\n    record(timestamp=now()-43m, log.source=\"file2\", betID=\"BET_20231019160000\", runID=\"2023101900045\"),\n    record(timestamp=now()-28m, log.source=\"file2\", betID=\"BET_20231019161501\", runID=\"2023101900055\"),\n    record(timestamp=now()-12m, log.source=\"file2\", betID=\"BET_20231019163101\", runID=\"2023101900065\"),\n    //datasource1 : online payment (log or bizevents)\n    record(timestamp=now()-41m, log.source=\"file3\", runID=\"2023101900045\", end_time=1701331400000000000),\n    record(timestamp=now()-26m, log.source=\"file3\", runID=\"2023101900055\", end_time=1701332342000000000),\n    record(timestamp=now()-10m, log.source=\"file3\", runID=\"2023101900065\", end_time=1701333894000000000)\n\n// correaltion based on betID\n| summarize {\n    records = if (\n        isNotNull(takeAny(end_time)), collectArray(record(runID,end_time)),\n        else: record(startTime = takeAny(start_time), runID=takeAny(runID),winners=takeAny(winners)))\n    }, by:{betID}\n| expand records\n\n// correaltion based on runID\n| summarize { \n    startTime = takeAny(records[startTime]),betID = takeAny(betID),winners = takeAny(records[winners]), endTime = takeAny(records[end_time])\n    }, by: {runID= records[runID]}\n\n|fields start=toTimestamp(startTime), runID, betID, winners, end=toTimestamp(endTime), payment_delay=(toTimestamp(endTime)-toTimestamp(startTime))\n","scannedRecords":0,"dqlVersion":"V1_0","scannedBytes":0,"locale":"","executionTimeMilliseconds":110,"notifications":[],"queryId":"e6f06aa1-3f64-4f41-8305-ea36b112c819","sampled":false}},"types":[{"mappings":{"start":{"type":"timestamp"},"runID":{"type":"string"},"betID":{"type":"string"},"winners":{"type":"long"},"end":{"type":"timestamp"},"payment_delay":{"type":"duration"}},"indexRange":[0,2]}]},"notifications":[],"dateTime":"2024-01-03T13:10:24.658Z","input":{"value":"data \n    //datasource1 : notification (log or bizevents)\n    record(timestamp=now()-45m, log.source=\"file1\", betID=\"BET_20231019160000\", start_time=1701331220000000000, winners=65),\n    record(timestamp=now()-30m, log.source=\"file1\", betID=\"BET_20231019161501\", start_time=1701332120000000000, winners=47),\n    record(timestamp=now()-15m, log.source=\"file1\", betID=\"BET_20231019163101\", start_time=1701333000000000000, winners=118),\n    //datasource2 : correlation id (log or bizevents=\n    record(timestamp=now()-43m, log.source=\"file2\", betID=\"BET_20231019160000\", runID=\"2023101900045\"),\n    record(timestamp=now()-28m, log.source=\"file2\", betID=\"BET_20231019161501\", runID=\"2023101900055\"),\n    record(timestamp=now()-12m, log.source=\"file2\", betID=\"BET_20231019163101\", runID=\"2023101900065\"),\n    //datasource1 : online payment (log or bizevents)\n    record(timestamp=now()-41m, log.source=\"file3\", runID=\"2023101900045\", end_time=1701331400000000000),\n    record(timestamp=now()-26m, log.source=\"file3\", runID=\"2023101900055\", end_time=1701332342000000000),\n    record(timestamp=now()-10m, log.source=\"file3\", runID=\"2023101900065\", end_time=1701333894000000000)\n\n// correaltion based on betID\n| summarize {\n    records = if (\n        isNotNull(takeAny(end_time)), collectArray(record(runID,end_time)),\n        else: record(startTime = takeAny(start_time), runID=takeAny(runID),winners=takeAny(winners)))\n    }, by:{betID}\n| expand records\n\n// correaltion based on runID\n| summarize { \n    startTime = takeAny(records[startTime]),betID = takeAny(betID),winners = takeAny(records[winners]), endTime = takeAny(records[end_time])\n    }, by: {runID= records[runID]}\n\n|fields start=toTimestamp(startTime), runID, betID, winners, end=toTimestamp(endTime), payment_delay=(toTimestamp(endTime)-toTimestamp(startTime))\n","timeframe":{"from":"now-90d","to":"now","details":{"from":{"type":"expression","normalized":"now-90d","date":"2023-10-05T12:07:14.069Z"},"to":{"type":"expression","normalized":"now","date":"2024-01-03T13:07:14.069Z"}}}}}},"height":158},{"id":"9266831d-0de7-4e98-ae1d-27a0abe4ce70","type":"markdown","markdown":"## Example of Business Process Observability with DQL\n- **DQL request 3** = SLO based on Payment delay"},{"id":"abba5386-feec-456d-bdeb-c10e190935fe","type":"dql","showTitle":false,"state":{"input":{"value":"//DQL based on BizEvents or Logs with the discontinued ID :betID=runID\n\n// data \n// is here to simulated BizEvents or Logs\n// in normal context, used  \n\n//fetch bizevents\n//| filter contains(event.name, \"step\")\n\n// fetch logs\n//| filter contains(log.source, \"step\")\n\ndata \n    //datasource1 : notification (log or bizevents)\n    record(timestamp=now()-45m, log.source=\"file1\", betID=\"BET_20231019160000\", start_time=1701331220000000000, winners=65),\n    record(timestamp=now()-30m, log.source=\"file1\", betID=\"BET_20231019161501\", start_time=1701332120000000000, winners=47),\n    record(timestamp=now()-15m, log.source=\"file1\", betID=\"BET_20231019163101\", start_time=1701333000000000000, winners=118),\n    //datasource2 : correlation id (log or bizevents=\n    record(timestamp=now()-43m, log.source=\"file2\", betID=\"BET_20231019160000\", runID=\"2023101900045\"),\n    record(timestamp=now()-28m, log.source=\"file2\", betID=\"BET_20231019161501\", runID=\"2023101900055\"),\n    record(timestamp=now()-12m, log.source=\"file2\", betID=\"BET_20231019163101\", runID=\"2023101900065\"),\n    //datasource1 : online payment (log or bizevents)\n    record(timestamp=now()-41m, log.source=\"file3\", runID=\"2023101900045\", end_time=1701331400000000000),\n    record(timestamp=now()-26m, log.source=\"file3\", runID=\"2023101900055\", end_time=1701332342000000000),\n    record(timestamp=now()-10m, log.source=\"file3\", runID=\"2023101900065\", end_time=1701333894000000000)\n\n// correaltion based on betID\n| summarize {\n    records = if (\n        isNotNull(takeAny(end_time)), collectArray(record(runID,end_time)),\n        else: record(startTime = takeAny(start_time), runID=takeAny(runID),winners=takeAny(winners)))\n    }, by:{betID}\n| expand records\n\n// correaltion based on runID\n| summarize { \n    startTime = takeAny(records[startTime]),betID = takeAny(betID),winners = takeAny(records[winners]), endTime = takeAny(records[end_time])\n    }, by: {runID= records[runID]}\n\n|fields start=toTimestamp(startTime), runID, betID, winners, end=toTimestamp(endTime), payment_delay=(toTimestamp(endTime)-toTimestamp(startTime))\n\n//SLO Calculation\n| summarize nbr_failed=countIf(payment_delay > 12m), total=count()\n| fieldsAdd SLO=(toDouble(total - nbr_failed) * 100 / total), target=99\n| fields SLO, target, SLO_success = if((SLO < target),false, else: true), nbr_failed, total\n","timeframe":{"from":"now-90d","to":"now","details":{"from":{"type":"expression","normalized":"now-90d","date":"2023-10-05T12:07:14.069Z"},"to":{"type":"expression","normalized":"now","date":"2024-01-03T13:07:14.069Z"}}}},"visualization":"table","state":"success","davis":{"includeLogs":true,"davisVisualization":{"isAvailable":true}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}}},"result":{"code":200,"value":{"records":[{"SLO":66.66666666666667,"target":"99","SLO_success":false,"nbr_failed":"1","total":"3"}],"metadata":{"grail":{"canonicalQuery":"data record(timestamp = now() - 45m, log.source = \"file1\", betID = \"BET_20231019160000\", start_time = 1701331220000000000, winners = 65), record(timestamp = now() - 30m, log.source = \"file1\", betID = \"BET_20231019161501\", start_time = 1701332120000000000, winners = 47), record(timestamp = now() - 15m, log.source = \"file1\", betID = \"BET_20231019163101\", start_time = 1701333000000000000, winners = 118), record(timestamp = now() - 43m, log.source = \"file2\", betID = \"BET_20231019160000\", runID = \"2023101900045\"), record(timestamp = now() - 28m, log.source = \"file2\", betID = \"BET_20231019161501\", runID = \"2023101900055\"), record(timestamp = now() - 12m, log.source = \"file2\", betID = \"BET_20231019163101\", runID = \"2023101900065\"), record(timestamp = now() - 41m, log.source = \"file3\", runID = \"2023101900045\", end_time = 1701331400000000000), record(timestamp = now() - 26m, log.source = \"file3\", runID = \"2023101900055\", end_time = 1701332342000000000), record(timestamp = now() - 10m, log.source = \"file3\", runID = \"2023101900065\", end_time = 1701333894000000000)\n| summarize by:{betID}, if(isNotNull(takeAny(end_time)), collectArray(record(runID, end_time)), else:record(startTime = takeAny(start_time), runID = takeAny(runID), winners = takeAny(winners))), alias:records\n| expand records\n| summarize by:{records[runID], alias:runID}, {{takeAny(records[startTime]), alias:startTime}, {takeAny(betID), alias:betID}, {takeAny(records[winners]), alias:winners}, {takeAny(records[end_time]), alias:endTime}}\n| fields {toTimestamp(startTime), alias:start}, runID, betID, winners, {toTimestamp(endTime), alias:end}, {toTimestamp(endTime) - toTimestamp(startTime), alias:payment_delay}\n| summarize {countIf(payment_delay > 12m), alias:nbr_failed}, {count(), alias:total}\n| fieldsAdd {toDouble(total - nbr_failed) * 100 / total, alias:SLO}, {99, alias:target}\n| fields SLO, target, {if(SLO < target, FALSE, else:TRUE), alias:SLO_success}, nbr_failed, total","timezone":"Europe/Paris","query":"//DQL based on BizEvents or Logs with the discontinued ID :betID=runID\n\n// data \n// is here to simulated BizEvents or Logs\n// in normal context, used  \n\n//fetch bizevents\n//| filter contains(event.name, \"step\")\n\n// fetch logs\n//| filter contains(log.source, \"step\")\n\ndata \n    //datasource1 : notification (log or bizevents)\n    record(timestamp=now()-45m, log.source=\"file1\", betID=\"BET_20231019160000\", start_time=1701331220000000000, winners=65),\n    record(timestamp=now()-30m, log.source=\"file1\", betID=\"BET_20231019161501\", start_time=1701332120000000000, winners=47),\n    record(timestamp=now()-15m, log.source=\"file1\", betID=\"BET_20231019163101\", start_time=1701333000000000000, winners=118),\n    //datasource2 : correlation id (log or bizevents=\n    record(timestamp=now()-43m, log.source=\"file2\", betID=\"BET_20231019160000\", runID=\"2023101900045\"),\n    record(timestamp=now()-28m, log.source=\"file2\", betID=\"BET_20231019161501\", runID=\"2023101900055\"),\n    record(timestamp=now()-12m, log.source=\"file2\", betID=\"BET_20231019163101\", runID=\"2023101900065\"),\n    //datasource1 : online payment (log or bizevents)\n    record(timestamp=now()-41m, log.source=\"file3\", runID=\"2023101900045\", end_time=1701331400000000000),\n    record(timestamp=now()-26m, log.source=\"file3\", runID=\"2023101900055\", end_time=1701332342000000000),\n    record(timestamp=now()-10m, log.source=\"file3\", runID=\"2023101900065\", end_time=1701333894000000000)\n\n// correaltion based on betID\n| summarize {\n    records = if (\n        isNotNull(takeAny(end_time)), collectArray(record(runID,end_time)),\n        else: record(startTime = takeAny(start_time), runID=takeAny(runID),winners=takeAny(winners)))\n    }, by:{betID}\n| expand records\n\n// correaltion based on runID\n| summarize { \n    startTime = takeAny(records[startTime]),betID = takeAny(betID),winners = takeAny(records[winners]), endTime = takeAny(records[end_time])\n    }, by: {runID= records[runID]}\n\n|fields start=toTimestamp(startTime), runID, betID, winners, end=toTimestamp(endTime), payment_delay=(toTimestamp(endTime)-toTimestamp(startTime))\n\n//SLO Calculation\n| summarize nbr_failed=countIf(payment_delay > 12m), total=count()\n| fieldsAdd SLO=(toDouble(total - nbr_failed) * 100 / total), target=99\n| fields SLO, target, SLO_success = if((SLO < target),false, else: true), nbr_failed, total\n","scannedRecords":0,"dqlVersion":"V1_0","scannedBytes":0,"locale":"","executionTimeMilliseconds":130,"notifications":[],"queryId":"68f58fa4-8475-4ba0-b53c-46e16dbac68f","sampled":false}},"types":[{"mappings":{"SLO":{"type":"double"},"target":{"type":"long"},"SLO_success":{"type":"boolean"},"nbr_failed":{"type":"long"},"total":{"type":"long"}},"indexRange":[0,0]}]},"notifications":[],"dateTime":"2024-01-03T13:21:53.803Z","input":{"value":"//DQL based on BizEvents or Logs with the discontinued ID :betID=runID\n\n// data \n// is here to simulated BizEvents or Logs\n// in normal context, used  \n\n//fetch bizevents\n//| filter contains(event.name, \"step\")\n\n// fetch logs\n//| filter contains(log.source, \"step\")\n\ndata \n    //datasource1 : notification (log or bizevents)\n    record(timestamp=now()-45m, log.source=\"file1\", betID=\"BET_20231019160000\", start_time=1701331220000000000, winners=65),\n    record(timestamp=now()-30m, log.source=\"file1\", betID=\"BET_20231019161501\", start_time=1701332120000000000, winners=47),\n    record(timestamp=now()-15m, log.source=\"file1\", betID=\"BET_20231019163101\", start_time=1701333000000000000, winners=118),\n    //datasource2 : correlation id (log or bizevents=\n    record(timestamp=now()-43m, log.source=\"file2\", betID=\"BET_20231019160000\", runID=\"2023101900045\"),\n    record(timestamp=now()-28m, log.source=\"file2\", betID=\"BET_20231019161501\", runID=\"2023101900055\"),\n    record(timestamp=now()-12m, log.source=\"file2\", betID=\"BET_20231019163101\", runID=\"2023101900065\"),\n    //datasource1 : online payment (log or bizevents)\n    record(timestamp=now()-41m, log.source=\"file3\", runID=\"2023101900045\", end_time=1701331400000000000),\n    record(timestamp=now()-26m, log.source=\"file3\", runID=\"2023101900055\", end_time=1701332342000000000),\n    record(timestamp=now()-10m, log.source=\"file3\", runID=\"2023101900065\", end_time=1701333894000000000)\n\n// correaltion based on betID\n| summarize {\n    records = if (\n        isNotNull(takeAny(end_time)), collectArray(record(runID,end_time)),\n        else: record(startTime = takeAny(start_time), runID=takeAny(runID),winners=takeAny(winners)))\n    }, by:{betID}\n| expand records\n\n// correaltion based on runID\n| summarize { \n    startTime = takeAny(records[startTime]),betID = takeAny(betID),winners = takeAny(records[winners]), endTime = takeAny(records[end_time])\n    }, by: {runID= records[runID]}\n\n|fields start=toTimestamp(startTime), runID, betID, winners, end=toTimestamp(endTime), payment_delay=(toTimestamp(endTime)-toTimestamp(startTime))\n\n//SLO Calculation\n| summarize nbr_failed=countIf(payment_delay > 12m), total=count()\n| fieldsAdd SLO=(toDouble(total - nbr_failed) * 100 / total), target=99\n| fields SLO, target, SLO_success = if((SLO < target),false, else: true), nbr_failed, total\n","timeframe":{"from":"now-90d","to":"now","details":{"from":{"type":"expression","normalized":"now-90d","date":"2023-10-05T12:07:14.069Z"},"to":{"type":"expression","normalized":"now","date":"2024-01-03T13:07:14.069Z"}}}}}},"height":73},{"id":"cff907cf-4f07-49e7-b324-df11735e8c1e","type":"markdown","markdown":"## Example of Business Process Observability with SRG\n- Copy / Paste the previous DQL request (`fields SLO` only) in [Site Reliability Gardian apps](https://www.dynatrace.com/hub/detail/site-reliability-guardian/)\n![Process Observability with SRG](https://github.com/dynatrace-ace-services/business-process-observability/blob/main/assets/business_process_observability_with_srg.png?raw=true)"},{"id":"ac45c46d-a1de-448f-9cd6-52ba480e52e0","type":"markdown","markdown":"## Example of Business Process Observability with Workflow\n- From the previous SRG configuration, create your automation with [Workflow](https://www.dynatrace.com/hub/detail/automations/?query=wor&filter=all) \n![Process Observability with Workflow](https://github.com/dynatrace-ace-services/business-process-observability/blob/main/assets/business_process_observability_with_workflow.png?raw=true)\n\n- You can also create your workflow directly from the DQL request 3 :  \n![workflow](https://github.com/dynatrace-ace-services/business-process-observability/blob/main/assets/workflow.png?raw=true)"}]}